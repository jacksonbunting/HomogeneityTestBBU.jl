var documenterSearchIndex = {"docs":
[{"location":"#HomogeneityTestBBU.jl","page":"Home","title":"HomogeneityTestBBU.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HomogeneityTestBBU implements the permutation test from Bugni, Bunting and Ura (2023). By default, the test function takes the data X and a test statistic test_stat_fn and returns the p-value computed as Equation (4), Bugni, Bunting and Ura (2023). The test rejects the null of homogeneity for all significance levels greater than the p-value.","category":"page"},{"location":"","page":"Home","title":"Home","text":"homogeneity_test_fn","category":"page"},{"location":"#HomogeneityTestBBU.homogeneity_test_fn","page":"Home","title":"HomogeneityTestBBU.homogeneity_test_fn","text":"homogeneity_test_fn\n\nThis function implements the homogeneity test of Bugni, Bunting and Ura (2023).\n\nArguments\n\nX::Tuple: The data in the form of tuple X=(S A), where A may be empty.\ntest_stat_fn::Function: A function that takes the arguments S and A (or S only, if A=) and returns a (vector of) test statistics.\nK::Int: An integer indicating the length of the MCMC chain. Defaults to 10,000.\nverbose::Vector{String}: Possible elements of the vector are \"P value\", \"Test stat\", and \"X^K\". Defaults to empty.\nA_trivial::Boolean: A Boolean indicating whether S=A. Defaults to false.\n\nValues\n\nPvalue: The test's p-value (Bugni, Bunting and Ura (2023), equation (4)).\nPvalue_chain: The p-value computed at each of K steps (optional).\ntest_stat_chain: The test statistic computed on X and of K steps (optional).\n`X_K': The tuple containing the the permuted data (optional).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"euler_algorithm","category":"page"},{"location":"#HomogeneityTestBBU.euler_algorithm","page":"Home","title":"HomogeneityTestBBU.euler_algorithm","text":"euler_algorithm\n\nThis function applies a Euler algorithm to the First Order Markov chain x\n\nArguments\n\nx::vector\n\n\n\n\n\n","category":"function"},{"location":"#Empirical-vignette","page":"Home","title":"Empirical vignette","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following code replicates the empirical application in Bugni, Bunting and Ura (2023).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Random, HomogeneityTestBBU\nS = [ 13  13  13  13  11   8   8   8   7   7   6   6   9   9   9   8   8   9   9;\n 15  20  19  19  20  20  14  15  21  20  20  20  21  21  19  19  19  20  20;\n 14  14  14  14  14  15  15  15  15  15  15  15  13  13  12  12  12  12  12;\n 12  12  12  12  12  12  12  12  12  12  13  13  13  13  13  13  12  13  13;\n 32  36  36  37  38  38  38  36  32  33  33  35  36  35  33  33  33  35  34;\n 13  18  16  16  16  17  17  17  14  15  15  14  14  15  13  13  13  13  13;\n  7  10  10  10  10   8   8   9  11  11  11  10  10  10   9  10  10  10  10;\n 17  17  18  18  18  18  18  16  16  16  16  15  15  15  14  14  14  14  14;\n 14  13  13  11  11  11  11  12  12  12  12  11  11  11  10  11  11  11  10;\n 23  23  22  24  24  24  24  24  23  22  22  20  20  20  19  20  20  20  20;\n  8  10  10  10  10  10  10  10  10   8   8   8   8   8   8   8   9   9  10;\n 13  13  13  12  12   7   7   9  12  12  12  13  13  13  12  12  12  12  12;\n 14  14  14  14  14  14  14  14  14  14  14  14  14  14  13  12  12  13  13;\n 11  11  11  11  11  11  11  11  11  11   9   9   9   9   8   8   8   8   8;\n 11  11  11   9   9   9   8   9   9   6   6   6   6   6   5   6   6   6   6;\n 17  18  18  18  18  17  18  18  18  18  18  18  18  18  16  16  16  16  17;\n 28  25  23  25  25  23  23  23  23  23  23  23  24  24  22  22  22  20  20;\n 22  21  21  22  21  21  22  22  22  21  22  21  21  22  20  20  20  20  21;\n 19  19  15  17  17  17  17  17  17  17  17  17  18  18  14  14  14  14  15;\n 11  12  12  12  11  11  11   9   8   8   8   8   8   5   5   5   5   5   5;\n 33  32  27  30  30  30  30  31  31  31  31  33  33  34  30  31  30  31  31;\n 12  12  12  11  12  12  12  12  12  12  12  13  12  12  11  11  11  11  12;\n 47  46  45  51  48  47  47  44  43  39  39  39  39  39  36  36  36  36  36]\n\nfunction test_fn(S_data)\n    S_support = sort(unique(S_data[:,1:(end-1)]))\n    outcome_support = sort(unique(S_data[:,2:end]))\n    \n    S_cols = size(S_data, 2);\n\n    T_P = 0;\n    T_P_star = 0;\n    \n    for j2 in eachindex(S_support)\n        tmp0 = S_data[:,1:(end-1)] .== S_support[j2];\n        tmp1 = unique(S_data[:,2:end][tmp0])\n        tmp_i = findall(vec(sum(tmp0, dims=2) .> 0))\n        for j3 in eachindex(tmp1)\n            P_d_tmp = sum((S_data[:,2:end][tmp0] .== tmp1[j3])) / sum(tmp0);\n            for j1 in tmp_i\n                P_j_d_tmp = sum((S_data[j1,2:end][tmp0[j1,:]] .== tmp1[j3])) / sum(tmp0[j1,:]);\n                W_j_d_tmp = sum(tmp0[j1,:]) / P_d_tmp\n                T_P = T_P + W_j_d_tmp * (P_j_d_tmp - P_d_tmp)^2\n                if P_j_d_tmp > 0\n                    T_P_star = T_P_star + 2 *  W_j_d_tmp * P_d_tmp * P_j_d_tmp * log(P_j_d_tmp / P_d_tmp)\n                end\n            end\n        end\n    end\n    return T_P, T_P_star\nend\n\nhomogeneity_test_fn(X = (S[:,12:end], []),\n    test_stat_fn = test_fn,\n    K=3)\nRandom.seed!(1234)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before = S[:,1:11];\nAfter = S[:,12:end];\n\n@time tAfter = homogeneity_test_fn(X = (After, []),\n    test_stat_fn = test_fn,\n    K=50000)\nprintln(tAfter.Pvalue)\n\n@time tBefore = homogeneity_test_fn(X = (Before, []),\n    test_stat_fn = test_fn,\n    K=50000)\nprintln(tBefore.Pvalue)","category":"page"},{"location":"#Data-and-test-statistic-for-empirical-vignette","page":"Home","title":"Data and test statistic for empirical vignette","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"S = [ 13  13  13  13  11   8   8   8   7   7   6   6   9   9   9   8   8   9   9;\n 15  20  19  19  20  20  14  15  21  20  20  20  21  21  19  19  19  20  20;\n 14  14  14  14  14  15  15  15  15  15  15  15  13  13  12  12  12  12  12;\n 12  12  12  12  12  12  12  12  12  12  13  13  13  13  13  13  12  13  13;\n 32  36  36  37  38  38  38  36  32  33  33  35  36  35  33  33  33  35  34;\n 13  18  16  16  16  17  17  17  14  15  15  14  14  15  13  13  13  13  13;\n  7  10  10  10  10   8   8   9  11  11  11  10  10  10   9  10  10  10  10;\n 17  17  18  18  18  18  18  16  16  16  16  15  15  15  14  14  14  14  14;\n 14  13  13  11  11  11  11  12  12  12  12  11  11  11  10  11  11  11  10;\n 23  23  22  24  24  24  24  24  23  22  22  20  20  20  19  20  20  20  20;\n  8  10  10  10  10  10  10  10  10   8   8   8   8   8   8   8   9   9  10;\n 13  13  13  12  12   7   7   9  12  12  12  13  13  13  12  12  12  12  12;\n 14  14  14  14  14  14  14  14  14  14  14  14  14  14  13  12  12  13  13;\n 11  11  11  11  11  11  11  11  11  11   9   9   9   9   8   8   8   8   8;\n 11  11  11   9   9   9   8   9   9   6   6   6   6   6   5   6   6   6   6;\n 17  18  18  18  18  17  18  18  18  18  18  18  18  18  16  16  16  16  17;\n 28  25  23  25  25  23  23  23  23  23  23  23  24  24  22  22  22  20  20;\n 22  21  21  22  21  21  22  22  22  21  22  21  21  22  20  20  20  20  21;\n 19  19  15  17  17  17  17  17  17  17  17  17  18  18  14  14  14  14  15;\n 11  12  12  12  11  11  11   9   8   8   8   8   8   5   5   5   5   5   5;\n 33  32  27  30  30  30  30  31  31  31  31  33  33  34  30  31  30  31  31;\n 12  12  12  11  12  12  12  12  12  12  12  13  12  12  11  11  11  11  12;\n 47  46  45  51  48  47  47  44  43  39  39  39  39  39  36  36  36  36  36];\n\nfunction test_fn(S_data)\n    S_support = sort(unique(S_data[:,1:(end-1)]))\n    outcome_support = sort(unique(S_data[:,2:end]))\n    \n    S_cols = size(S_data, 2);\n\n    T_P = 0;\n    T_P_star = 0;\n    \n    for j2 in eachindex(S_support)\n        tmp0 = S_data[:,1:(end-1)] .== S_support[j2];\n        tmp1 = unique(S_data[:,2:end][tmp0])\n        tmp_i = findall(vec(sum(tmp0, dims=2) .> 0))\n        for j3 in eachindex(tmp1)\n            P_d_tmp = sum((S_data[:,2:end][tmp0] .== tmp1[j3])) / sum(tmp0);\n            for j1 in tmp_i\n                P_j_d_tmp = sum((S_data[j1,2:end][tmp0[j1,:]] .== tmp1[j3])) / sum(tmp0[j1,:]);\n                W_j_d_tmp = sum(tmp0[j1,:]) / P_d_tmp\n                T_P = T_P + W_j_d_tmp * (P_j_d_tmp - P_d_tmp)^2\n                if P_j_d_tmp > 0\n                    T_P_star = T_P_star + 2 *  W_j_d_tmp * P_d_tmp * P_j_d_tmp * log(P_j_d_tmp / P_d_tmp)\n                end\n            end\n        end\n    end\n    return T_P, T_P_star\nend","category":"page"}]
}
